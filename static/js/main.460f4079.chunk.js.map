{"version":3,"sources":["components/Presets.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Presets","glider","small exploder","exploder","row","tumbler","Game","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","grid","isRunning","iterationCount","cellColor","gridColor","gridSize","smallGridButton","largeGridButton","optionsMenu","rulesText","aboutText","openMenu","startGame","event","preventDefault","setState","continueGame","stopGame","window","clearTimeout","timeout","map","slice","i","length","j","count","countNeighbors","setTimeout","advanceOneStep","rowIndex","cellIndex","neighbors","position","toggleCell","clearGrid","Array","fill","_","toggleOptions","toggleRules","toggleAbout","usePreset","target","value","presetToLoad","forEach","createRandomGrid","Math","random","handleCellColorChange","handleGridColorChange","handleGridSizeChange","game","options","rules","about","_this2","react_default","a","createElement","className","index_es","onClick","icon","faTimes","size","cursor","onChange","style","backgroundColor","color","concat","key","cell","faPlay","faStop","faStepForward","faEraser","React","Component","App","src_components_Game","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.460f4079.chunk.js","sourcesContent":["let glider = [\r\n    [6, 7],\r\n    [7, 8],\r\n    [8, 6],\r\n    [8, 7],\r\n    [8, 8],\r\n];\r\nlet smallExploder = [\r\n    [6, 7],\r\n    [7, 6],\r\n    [7, 7],\r\n    [7, 8],\r\n    [8, 6],\r\n    [8, 8],\r\n    [9, 7]\r\n];\r\nlet exploder = [\r\n    [5, 5],\r\n    [5, 7],\r\n    [5, 9],\r\n    [6, 5],\r\n    [6, 9],\r\n    [7, 5],\r\n    [7, 9],\r\n    [8, 5],\r\n    [8, 9],\r\n    [9, 5],\r\n    [9, 7],\r\n    [9, 9]\r\n];\r\nlet row = [\r\n    [7, 3],\r\n    [7, 4],\r\n    [7, 5],\r\n    [7, 6],\r\n    [7, 7],\r\n    [7, 8],\r\n    [7, 9],\r\n    [7, 10],\r\n    [7, 11]\r\n];\r\nlet tumbler = [\r\n    [4, 5],\r\n    [4, 6],\r\n    [4, 8],\r\n    [4, 9],\r\n    [5, 5],\r\n    [5, 6],\r\n    [5, 8],\r\n    [5, 9],\r\n    [6, 6],\r\n    [6, 8],\r\n    [7, 4],\r\n    [7, 6],\r\n    [7, 8],\r\n    [7, 10],\r\n    [8, 4],\r\n    [8, 6],\r\n    [8, 8],\r\n    [8, 10],\r\n    [9, 4],\r\n    [9, 5],\r\n    [9, 9],\r\n    [9, 10]\r\n];\r\nconst Presets = {\r\n    \"glider\": glider,\r\n    \"small exploder\": smallExploder,\r\n    \"exploder\": exploder,\r\n    \"row\": row,\r\n    \"tumbler\": tumbler\r\n};\r\nexport default Presets;","import React from 'react';\r\nimport Presets from './Presets';\r\nimport './Game.css';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlay, faStop, faStepForward, faEraser, faTimes } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            isRunning: false,\r\n            iterationCount: 0,\r\n            cellColor: '#0074D9',\r\n            gridColor: 'white',\r\n            gridSize: 'small',\r\n            smallGridButton: 'selected',\r\n            largeGridButton: 'notSelected',\r\n            optionsMenu: false,\r\n            rulesText: false,\r\n            aboutText: false,\r\n            openMenu: false\r\n        };\r\n\r\n        this.startGame = event => {\r\n            event.preventDefault();\r\n            if (this.state.isRunning) {\r\n                return;\r\n            }\r\n            this.setState({ isRunning: true });\r\n            this.continueGame();\r\n        };\r\n\r\n        this.stopGame = event => {\r\n            event.preventDefault();\r\n            if (!this.state.isRunning) {\r\n                return;\r\n            }\r\n            window.clearTimeout(this.timeout);\r\n            this.setState({ isRunning: false });\r\n        };\r\n\r\n        this.continueGame = () => {\r\n                let grid = this.state.grid.map(row => row.slice());\r\n                for (let i = 0; i < grid.length; i++) {\r\n                    for (let j = 0; j < grid[i].length; j++) {\r\n                        let count = this.countNeighbors(i, j);\r\n                        if (grid[i][j]) {\r\n                            if (count < 2 || count > 3) {\r\n                                grid[i][j] = false;\r\n                            }\r\n                        } else {\r\n                            if (count === 3) {\r\n                                grid[i][j] = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                this.setState({\r\n                    grid: grid,\r\n                    iterationCount: this.state.iterationCount + 1\r\n                });\r\n\r\n                this.timeout = setTimeout(() => {\r\n                    this.continueGame();\r\n                }, 500);\r\n        };\r\n\r\n        this.advanceOneStep = event => {\r\n            event.preventDefault();\r\n            if (this.state.isRunning) {\r\n                return;\r\n            }\r\n            this.continueGame();\r\n            window.clearTimeout(this.timeout);\r\n            this.setState({ isRunning: false });\r\n        };\r\n\r\n        this.countNeighbors = (rowIndex, cellIndex) => {\r\n            const neighbors = [\r\n                [rowIndex - 1, cellIndex - 1],\r\n                [rowIndex - 1, cellIndex],\r\n                [rowIndex - 1, cellIndex + 1],\r\n                [rowIndex, cellIndex - 1],\r\n                [rowIndex, cellIndex + 1],\r\n                [rowIndex + 1, cellIndex - 1],\r\n                [rowIndex + 1, cellIndex],\r\n                [rowIndex + 1, cellIndex + 1]\r\n            ];\r\n\r\n            let count = 0;\r\n\r\n            for (let i = 0; i < neighbors.length; i++) {\r\n                if(this.state.gridSize === 'small') {\r\n                    if ((neighbors[i][0] >= 0 && neighbors[i][0] <= 14) &&\r\n                        (neighbors[i][1] >= 0 && neighbors[i][1] <= 14)) {\r\n                        const position = neighbors[i];\r\n                        if (this.state.grid[position[0]][position[1]]) {\r\n                            count += 1;\r\n                        }\r\n                    }\r\n                }\r\n                if (this.state.gridSize === 'large') {\r\n                    if ((neighbors[i][0] >= 0 && neighbors[i][0] <= 29) &&\r\n                        (neighbors[i][1] >= 0 && neighbors[i][1] <= 29)) {\r\n                        const position = neighbors[i];\r\n                        if (this.state.grid[position[0]][position[1]]) {\r\n                            count += 1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return count;\r\n        };\r\n\r\n        this.toggleCell = (rowIndex, cellIndex) => {\r\n            let grid = this.state.grid;\r\n            grid[rowIndex][cellIndex] = !grid[rowIndex][cellIndex];\r\n            this.setState({ grid: grid });\r\n        };\r\n\r\n        this.clearGrid = () => {\r\n            let grid = Array(15).fill(null).map(_ => Array(15).fill(false));\r\n            if (this.state.gridSize === 'large') {\r\n                grid = Array(30).fill(null).map(_ => Array(30).fill(false));\r\n            }\r\n            this.setState({ grid: grid, isRunning: false, iterationCount: 0 });\r\n            window.clearTimeout(this.timeout);\r\n        };\r\n\r\n        this.toggleOptions = () => {\r\n            if (this.state.optionsMenu === false) {\r\n                this.setState({ optionsMenu: true,\r\n                                openMenu: true,\r\n                                rulesText: false,\r\n                                aboutText: false\r\n                })\r\n            }\r\n            else {\r\n                this.setState({ optionsMenu: false,\r\n                                openMenu: false,\r\n                                rulesText: false,\r\n                                aboutText: false\r\n                })\r\n            }\r\n        }\r\n\r\n        this.toggleRules = () => {\r\n            if(this.state.rulesText === false) {\r\n                this.setState({ rulesText: true,\r\n                                openMenu: true,\r\n                                optionsMenu: false,\r\n                                aboutText: false })\r\n            }\r\n            else {\r\n                this.setState({ rulesText: false,\r\n                                openMenu: false,\r\n                                optionsMenu: false,\r\n                                aboutText: false })\r\n            }\r\n        }\r\n\r\n        this.toggleAbout = () => {\r\n            if (this.state.aboutText === false) {\r\n                this.setState({ aboutText: true,\r\n                                openMenu: true,\r\n                                optionsMenu: false,\r\n                                rulesText: false })\r\n            }\r\n            else {\r\n                this.setState({ aboutText: false,\r\n                                openMenu: false,\r\n                                optionsMenu: false,\r\n                                rulesText: false })\r\n            }\r\n        }\r\n\r\n        this.usePreset = event => {\r\n            if(event.target.value === 'None') {\r\n                return;\r\n            }\r\n            if(event.target.value === 'random') {\r\n                this.createRandomGrid();\r\n                return;\r\n            }\r\n            clearTimeout(this.timeout);\r\n            let grid = Array(15).fill(null).map(_ => Array(15).fill(false));\r\n            if (this.state.gridSize === 'large') {\r\n                grid = Array(30).fill(null).map(_ => Array(30).fill(false));\r\n            }\r\n            const presetToLoad = Presets[event.target.value];\r\n            if(this.state.gridSize === 'small') {\r\n                presetToLoad.forEach(position => {\r\n                    grid[position[0]][position[1]] = true;\r\n                });\r\n            }\r\n            if(this.state.gridSize === 'large') {\r\n                presetToLoad.forEach(position => {\r\n                    grid[position[0] + 7][position[1] + 7] = true;\r\n                });\r\n            }\r\n            this.setState({\r\n                grid: grid,\r\n                isRunning: false,\r\n                iterationCount: 0\r\n            });\r\n        };\r\n\r\n        this.createRandomGrid = () => {\r\n            clearTimeout(this.timeout);\r\n            let grid = Array(15).fill(null).map(_ => Array(15).fill(false));\r\n            if (this.state.gridSize === 'large') {\r\n                grid = Array(30).fill(null).map(_ => Array(30).fill(false));\r\n            }\r\n            for(let i = 0; i < grid.length; i++) {\r\n                for(let j = 0; j < grid.length; j++) {\r\n                    if (Math.random() < .5) {\r\n                        grid[i][j] = !grid[i][j];\r\n                    }\r\n                }\r\n            }\r\n            this.setState({\r\n                grid: grid,\r\n                isRunning: false,\r\n                iterationCount: 0\r\n            });\r\n        };\r\n\r\n        this.handleCellColorChange = event => {\r\n            this.setState({ cellColor: event.target.value });\r\n        };\r\n\r\n        this.handleGridColorChange = event => {\r\n            this.setState({ gridColor: event.target.value });\r\n        };\r\n\r\n        this.handleGridSizeChange = event => {\r\n            if(this.state.gridSize === 'small') {\r\n                this.setState({\r\n                    gridSize: event.target.value,\r\n                    smallGridButton: 'notSelected',\r\n                    largeGridButton: 'selected'\r\n                }, () => {\r\n                    this.clearGrid(event);\r\n                    });\r\n            }\r\n            if (this.state.gridSize === 'large') {\r\n                this.setState({\r\n                    gridSize: event.target.value,\r\n                    smallGridButton: 'selected',\r\n                    largeGridButton: 'notSelected'\r\n                }, () => {\r\n                    this.clearGrid(event);\r\n                });\r\n            }\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let grid = Array(15).fill(null).map(_ => Array(15).fill(false));\r\n        if (this.state.gridSize === 'large') {\r\n            grid = Array(30).fill(null).map(_ => Array(30).fill(false));\r\n        }\r\n        this.setState({ grid: grid });\r\n    }\r\n\r\n    render() {\r\n        let game;\r\n        let options;\r\n        let rules;\r\n        let about;\r\n        if(this.state.optionsMenu) {\r\n            options = <div className=\"options\">\r\n                <div className=\"closeButton\"><FontAwesomeIcon onClick={this.toggleOptions} icon={faTimes} size=\"1x\" cursor=\"pointer\" /></div>\r\n                <h1>Options</h1>\r\n                <div className=\"option-settings\">\r\n                    <div className=\"option-labels\">\r\n                        <p>Size</p>\r\n                        <p>Pattern</p>\r\n                        <p>Grid Color</p>\r\n                        <p>Cell Color</p>\r\n                    </div>\r\n                    <div className=\"option-controls\">\r\n                        <div className=\"size-options\">\r\n                            <button className={this.state.smallGridButton} onClick={this.handleGridSizeChange} value={'small'}>Small</button>\r\n                            <button className={this.state.largeGridButton} onClick={this.handleGridSizeChange} value={'large'}>Large</button>\r\n                        </div>\r\n                        <div className=\"dropdowns\">\r\n                            <select value={this.state.value} onChange={this.usePreset}>\r\n                                <option>None</option>\r\n                                <option value=\"random\">Random</option>\r\n                                <option value=\"glider\">Glider</option>\r\n                                <option value=\"small exploder\">Small Exploder</option>\r\n                                <option value=\"exploder\">Exploder</option>\r\n                                <option value=\"row\">Row</option>\r\n                            </select>\r\n                            <select value={this.state.value} onChange={this.handleGridColorChange}>\r\n                                <option style={{ backgroundColor: \"white\", color: \"black\" }} value=\"white\">White</option>\r\n                                <option style={{ backgroundColor: \"#0074D9\" }} value=\"#0074D9\">Blue</option>\r\n                                <option style={{ backgroundColor: \"#7FDBFF\" }} value=\"#7FDBFF\">Aqua</option>\r\n                                <option style={{ backgroundColor: \"#39CCCC\" }} value=\"#39CCCC\">Teal</option>\r\n                                <option style={{ backgroundColor: \"#2ECC40\" }} value=\"#2ECC40\">Green</option>\r\n                                <option style={{ backgroundColor: \"#FFDC00\" }} value=\"#FFDC00\">Yellow</option>\r\n                                <option style={{ backgroundColor: \"#FF851B\" }} value=\"#FF851B\">Orange</option>\r\n                                <option style={{ backgroundColor: \"#FF4136\" }} value=\"#FF4136\">Red</option>\r\n                                <option style={{ backgroundColor: \"#B10DC9\" }} value=\"#B10DC9\">Purple</option>\r\n                                <option style={{ backgroundColor: \"#85144b\" }} value=\"#85144b\">Maroon</option>\r\n                                <option style={{ backgroundColor: \"#AAAAAA\" }} value=\"#AAAAAA\">Gray</option>\r\n                            </select>\r\n                            <select value={this.state.value} onChange={this.handleCellColorChange}>\r\n                                <option style={{ backgroundColor: \"#0074D9\" }} value=\"#0074D9\">Blue</option>\r\n                                <option style={{ backgroundColor: \"#7FDBFF\" }} value=\"#7FDBFF\">Aqua</option>\r\n                                <option style={{ backgroundColor: \"#39CCCC\" }} value=\"#39CCCC\">Teal</option>\r\n                                <option style={{ backgroundColor: \"#2ECC40\" }} value=\"#2ECC40\">Green</option>\r\n                                <option style={{ backgroundColor: \"#FFDC00\" }} value=\"#FFDC00\">Yellow</option>\r\n                                <option style={{ backgroundColor: \"#FF851B\" }} value=\"#FF851B\">Orange</option>\r\n                                <option style={{ backgroundColor: \"#FF4136\" }} value=\"#FF4136\">Red</option>\r\n                                <option style={{ backgroundColor: \"#B10DC9\" }} value=\"#B10DC9\">Purple</option>\r\n                                <option style={{ backgroundColor: \"#85144b\" }} value=\"#85144b\">Maroon</option>\r\n                                <option style={{ backgroundColor: \"#AAAAAA\" }} value=\"#AAAAAA\">Gray</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        }\r\n        if(this.state.rulesText) {\r\n            rules = <div className =\"rules\">\r\n                <div className=\"closeButton\"><FontAwesomeIcon onClick={this.toggleRules} icon={faTimes} size=\"1x\" cursor=\"pointer\"/></div>\r\n                <h1>Rules</h1>\r\n                <p>Any live cell with fewer than two live neighbors dies, as if by underpopulation.</p>\r\n                <p>Any live cell with two or three live neighbors lives on to the next generation.</p>\r\n                <p>Any live cell with more than three live neighbors dies, as if by overpopulation.</p>\r\n                <p>Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.</p>\r\n            </div>\r\n        }\r\n        if(this.state.aboutText) {\r\n            about = <div className=\"about\">\r\n                <div className=\"closeButton\"><FontAwesomeIcon onClick={this.toggleAbout} icon={faTimes} size=\"1x\" cursor=\"pointer\"/></div>\r\n                <h1>About</h1>\r\n                <p>In late 1940, John von Neumann defined life as a creation (as a being or organism) which can reproduce itself and simulate a Turing machine. Von Neumann was thinking about an engineering solution which would use electromagnetic components floating randomly in liquid or gas. This turned out not to be realistic with the technology available at the time. Thus, ingeniously, Stanisław Ulam invented cellular automata, which were intended to simulate von Neumann's theoretical electromagnetic constructions. Ulam discussed using computers to simulate his cellular automata in a two-dimensional lattice in several papers. In parallel, Von Neumann attempted to construct Ulam's cellular automaton. Although successful, he was busy with other projects and left some details unfinished. His construction was complicated because it tried to simulate his own engineering design.</p>\r\n            </div>\r\n        }\r\n        if(!this.state.openMenu) {\r\n            game = <div className={`game ${this.state.gridSize}`}>\r\n                <h1>John Conway's Game of Life</h1>\r\n                <div className=\"grid-container\" style={{ backgroundColor: this.state.gridColor }}>\r\n                    {this.state.grid.map((row, rowIndex) => {\r\n                        return <div key={rowIndex}\r\n                            className=\"row\">{row.map((cell, cellIndex) => {\r\n                                if (cell) {\r\n                                    return <div key={cellIndex}\r\n                                        className=\"live-cell\"\r\n                                        style={{ backgroundColor: this.state.cellColor }}\r\n                                        onClick={!this.state.isRunning ?\r\n                                            () => this.toggleCell(rowIndex, cellIndex) : null}\r\n                                    >{cell}</div>;\r\n                                } else return <div key={cellIndex}\r\n                                    className=\"dead-cell\"\r\n                                    style={{ backgroundColor: this.state.gridColor }}\r\n                                    onClick={!this.state.isRunning ?\r\n                                        () => this.toggleCell(rowIndex, cellIndex) : null}\r\n                                >{cell}</div>;\r\n                            })}</div>;\r\n                    })}\r\n                </div>\r\n                <div className=\"generation-count\">Generation {this.state.iterationCount}</div>\r\n                <div className=\"controls\">\r\n                    <FontAwesomeIcon onClick={this.startGame} icon={faPlay} size=\"2x\" cursor=\"pointer\" />\r\n                    <FontAwesomeIcon onClick={this.stopGame} icon={faStop} size=\"2x\" cursor=\"pointer\" />\r\n                    <FontAwesomeIcon onClick={this.advanceOneStep} icon={faStepForward} size=\"2x\" cursor=\"pointer\" />\r\n                    <FontAwesomeIcon onClick={this.clearGrid} icon={faEraser} size=\"2x\" cursor=\"pointer\" />\r\n                </div>\r\n            </div>\r\n        }\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"info\">\r\n                    <h1 onClick={this.toggleOptions}>Options</h1>\r\n                    <h1 onClick={this.toggleRules}>Rules</h1>\r\n                    <h1 onClick={this.toggleAbout}>About</h1>\r\n                </div>\r\n                <div>{options}</div>\r\n                <div>{rules}</div>\r\n                <div>{about}</div>\r\n                <div>{game}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;","import React, { Component } from 'react';\nimport Game from './components/Game';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"background\"></div>\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}